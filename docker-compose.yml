# All written by Lucas Bertoni

version: '3.4'

services:
  client:
    image: client
    build:
      context: client
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 3000:3000
    links:
      - authentication
    networks:
      - apinet



  eventbus:
    image: eventbus
    build:
      context: event-bus
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $EVENTBUS_PORT:$EVENTBUS_PORT
    restart: on-failure
    networks:
      - apinet



  authentication:
    image: authentication
    build:
      context: authentication
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      PROD_POSTGRES_STRING: $PROD_AUTH_POSTGRES_STRING
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $AUTHENTICATION_PORT:$AUTHENTICATION_PORT
    restart: on-failure
    depends_on:
      - authentication_database
      - eventbus
    networks:
      - apinet



  eventlogger:
    image: eventlogger
    build:
      context: event-logger
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      PROD_POSTGRES_STRING: $PROD_EVNTLGS_POSTGRES_STRING
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $EVENTLOGGER_PORT:$EVENTLOGGER_PORT
    restart: on-failure
    depends_on:
      - eventlogs_database
      - eventbus
      - authentication
      - share
    networks:
      - apinet



  share:
    image: share
    build:
      context: share
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      PROD_POSTGRES_STRING: $PROD_SHARE_POSTGRES_STRING
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $SHARE_PORT:$SHARE_PORT
    restart: on-failure
    depends_on:
      - share_database
      - eventbus
      - recipe
      - pantry
    networks:
      - apinet

  pantry:
    image: pantry
    build:
      context: pantry
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      PROD_POSTGRES_STRING: $PROD_PNTRY_POSTGRES_STRING
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $PANTRY_PORT:$PANTRY_PORT
    restart: on-failure
    depends_on:
      - pantry_database
      - eventbus
      - authentication
    networks:
      - apinet


  recipe:
    image: recipe
    build:
      context: recipe
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
      PROD_POSTGRES_STRING: $PROD_RECIPE_POSTGRES_STRING
      EVENTBUS_PORT: $EVENTBUS_PORT
    ports:
      - $RECIPE_PORT:$RECIPE_PORT
    restart: on-failure
    depends_on:
      - recipe_database
      - eventbus
      - authentication
      - pantry
    networks:
      - apinet



  authentication_database:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgrespw
      - PGUSER=postgres
    ports:
      - 5000:5432
    volumes:
      - authentication_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready" ]
        interval: 15s
        timeout: 10s
        retries: 5
    networks:
      - apinet



  eventlogs_database:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgrespw
      - PGUSER=postgres
    ports:
      - 5001:5432
    volumes:
      - event_logs_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready" ]
        interval: 15s
        timeout: 10s
        retries: 5
    networks:
      - apinet



  share_database:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgrespw
      - PGUSER=postgres
    ports:
      - 5002:5432
    volumes:
      - share_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready" ]
        interval: 15s
        timeout: 10s
        retries: 5
    networks:
      - apinet



  pantry_database:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgrespw
      - PGUSER=postgres
    ports:
      - 5003:5432
    volumes:
      - pantry_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready" ]
        interval: 15s
        timeout: 10s
        retries: 5
    networks:
      - apinet


  recipe_database:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgrespw
      - PGUSER=postgres
    ports:
      - 5004:5432
    volumes:
      - recipe_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready" ]
        interval: 15s
        timeout: 10s
        retries: 5
    networks:
      - apinet



networks:
  apinet:
    driver: bridge



volumes:
  authentication_data:
  event_logs_data:
  share_data:
  recipe_data:
  pantry_data: